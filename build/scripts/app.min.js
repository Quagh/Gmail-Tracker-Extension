//angular.module('app', ['config', 'errors', 'api', 'session', 'auth', 'vendors', 'directives', 'filters', 'utils'])
angular.module('app', ['config', 'errors', 'api', 'session', 'auth', 'gmail'])
    
    // Log config
.config(['$logProvider', 'Config', function ($logProvider, Config) {
    
    $logProvider.debugEnabled(Config.debug);
    
}]);

// Manually trigger angular
angular.element(document).ready(function () {
    
    // Add controller
    $('body').attr('ng-controller', 'ApplicationController');
    
    // TODO: inject checkbox "Track mail?" + bind to app controller scope variable
    
    // Inject Angular app
    angular.bootstrap(document, ['app']);
    
});
angular.module('app')

.controller('ApplicationController', ['$scope', '$log', 'GmailService', 'TrackedEmailService',
    function ($scope, $log, GmailService, TrackedEmailService) {
        
        $log.debug('App controller init');
        
        $log.debug('Gmail address is', GmailService.getUserMail());
        
        // Compose
        $scope.$on('compose', function (compose, type) {
            
            $log.debug('compose event', compose, type);
            
        });
        
        // Send
        $scope.$on('send_message', function (url, body, data, xhr) {
            
            $log.debug('send_message event', url, body, data, xhr);
            
            // Inject tracking pixel
            var msg = xhr.xhrParams.body_params;
            var id = generateRandomString(32);
            msg.body = msg.body + '<img src="http://tracker.sebastiaanluca.dev/track/' + id + '" alt="" />';
            
            console.log('From', data.from);
            console.log('To', data.to);
            console.log('CC', data.cc);
            console.log('BCC', data.bcc);
            console.log('Subject', data.subject);
            console.log('Message', data.body);
            console.log('Is HTML?', data.ishtml);
            console.log('Request read receipt?', data.readreceipt);
            console.log('Gmail message id', data.composeid);
            
            // TODO: POST id, critical data, and metadata to API
            
        });
        
        
        
        // API test call
        TrackedEmailService.post({
            id: 'xSHzlG6UnIi0ncrVaym3bFgn32tYFare',
            to: 'derp@sebastiaanluca.com'
        }).then(function (response) {
            
            $log.debug('API test call response: ', response);
            
        });
        
    }]);
angular.module('app')

.factory('TrackedEmailService', ['BaseAPIService',
    function (BaseAPIService) {
        
        // Initialize a BaseService with the correct API endpoint
        return new BaseAPIService('tracked_emails');
        
    }]);
angular.module('errors', [])

.run(['$rootScope', '$log', '$injector', 'AuthEvents',
    function ($rootScope, $log, $injector, AuthEvents) {
        
        // Handle critical token failure
        $rootScope.$on(AuthEvents.clientAuthenticationFailed, function (event) {
            
            $log.debug('Critical app error :(', event);
            
        });
        
    }])
    
    // Debugger
.factory('$exceptionHandler', function () {
    return function (exception, cause) {
        exception.message += ' (caused by "' + cause + '")';
        
        throw exception;
    };
});







angular.module('gmail', []);
angular.module('api', ['restangular', 'api.service']);
angular.module('auth', ['auth.service', 'auth.session', 'http-auth-interceptor'])

.run(['$rootScope', '$injector', '$log', 'AuthEvents', 'AuthService',
    function ($rootScope, $injector, $log, AuthEvents, AuthService) {
        
        // Add OAuth2 token to header for all
        // $http and Restangular calls
        $injector.get('$http').defaults.transformRequest = function (data, headersGetter) {
            
            if (AuthService.isAuthenticated()) {
                //$log.debug('You\'re authenticated. Adding access token to HTTP request: ' + AuthService.getAccessToken());
                headersGetter().Authorization = 'Bearer ' + AuthService.getAccessToken();
            }
            
            if (data) {
                // IMPORTANT! DO NOT OMIT!
                // Parses request data to JSON so the API actually understands it
                return angular.toJson(data);
            }
            
        };
        
    }]);
angular.module('session', ['LocalStorageModule', 'session.service'])

.config(['Config', 'localStorageServiceProvider',
    function (Config, localStorageServiceProvider) {

        // Set local storage prefix to our unique app identifier
        localStorageServiceProvider.setPrefix(Config.app.identifier);

    }]);
/**
 * WARNING
 * 
 * This file has automatically been generated from development.json by gulp.
 
 * Do NOT modify it as it will be overwritten!
 */
 
angular.module("config", [])

.constant("Config", {
	"debug": true,
	"app": {
		"identifier": "fold-gmail-tracker-extension"
	},
	"api": {
		"url": "https://api.sebastiaanluca.dev/"
	},
	"oauth": {
		"client_id": "YlsuuA7u7kvRhWxVxocg79ftNj8H5TcQhrep7vsT",
		"client_secret": "2F4jv4gA2WPAK92fWjk05RUJpu4qzLGggFawsdaA"
	}
})

;
angular.module('api.service', [])

.constant('ApiEvents', {
    apiRequestStarted: 'api:request:started',
    apiRequestFinished: 'api:request:finished'
})

.factory('API', ['$rootScope', '$location', '$log', 'Config', 'Restangular', 'ApiEvents',
    function ($rootScope, $location, $log, Config, Restangular, ApiEvents) {
        
        return Restangular.withConfig(function (RestangularConfigurator) {
            
            // Set API base URL from configuration file
            RestangularConfigurator.setBaseUrl(Config.api.url);
            
            // Bind some cool events
            RestangularConfigurator.setRequestInterceptor(function (element, operation, route, url) {
                $rootScope.$broadcast(ApiEvents.apiRequestStarted);
                
                // Just pass this through without making changes
                return element;
            });
            
            RestangularConfigurator.addResponseInterceptor(function (data, operation, what, url, response, deferred) {
                $rootScope.$broadcast(ApiEvents.apiRequestFinished);
                
                // Just pass this through without making changes
                return data;
            });
            
            RestangularConfigurator.setErrorInterceptor(function (response, deferred, responseHandler) {
                $rootScope.$broadcast(ApiEvents.apiRequestFinished);
                
                $log.debug('API request failed', response.config.url, response.status + ' - ', response.data);
                
                // Return true to indicate error has not been handled
                return true;
            });
            
            // Intercept and parse API response
            RestangularConfigurator.addResponseInterceptor(function (data, operation, what, url, response, deferred) {
                // Return the core data
                // Fixes Restangular nagging about getList() not returning an array, ugh
                return data.data;
            });
            
        });
        
    }]);
angular.module('api')

.factory('BaseAPIService', ['API',
    function (API) {
        
        // Create an API Restangular endpoint service thingamagig
        var BaseService = function (endpoint) {
            this.repository = API.service(endpoint);
        };
        
        
        
        // Get the real data, screw Restangular
        BaseService.prototype.clean = function (promise) {
            return promise.then(function (response) {
                // Works for objects AND arrays! Yay.
                return response.plain();
            });
        };
        
        
        
        /**
         * Validate an ID to prevent invalid API calls.
         *
         * @param id
         */
        var validate = function (id) {
            
            // Check if the ID is set (integer or string)
            if (id == null) {
                throw new Error('[BaseApiService] The provided ID is not an integer! (' + id + ')');
            }
            
        };
        
        
        
        // Get a list of records
        BaseService.prototype.all = function () {
            return this.clean(this.repository.getList());
        };
        
        // Get a list of sub records
        BaseService.prototype.allSub = function (id, sub, params) {
            return this.clean(this.repository.one(id).getList(sub, params));
        };
        
        
        
        // Get a single record
        BaseService.prototype.get = function (id) {
            validate(id);
            
            return this.clean(this.repository.one(id).get());
        };
        
        // Get a single sub record
        BaseService.prototype.getSub = function (id, sub, subId, params) {
            validate(id);
            validate(subId);
            
            return this.clean(this.repository.one(id).one(sub, subId).get(params));
        };
        
        
        
        // Create a new record
        BaseService.prototype.post = function (attributes) {
            return this.clean(this.repository.post(attributes));
        };
        
        // Create a new sub record
        // TODO: test me
        BaseService.prototype.postSub = function (id, sub, attributes) {
            validate(id);
            
            return this.clean(this.repository.one(id).all(sub).post(attributes));
        };
        
        
        
        // Update a single record
        BaseService.prototype.patch = function (id, attributes) {
            validate(id);
            
            return this.clean(this.repository.one(id).patch(attributes));
        };
        
        // Update a single sub record
        BaseService.prototype.patchSub = function (id, sub, subId, attributes) {
            validate(id);
            validate(subId);
            
            return this.clean(this.repository.one(id).one(sub, subId).patch(attributes));
        };
        
        
        
        // Replace a single record
        BaseService.prototype.put = function (id, attributes) {
            validate(id);
            
            return this.clean(this.repository.one(id).put(attributes));
        };
        
        // Replace a single sub record
        BaseService.prototype.putSub = function (id, sub, subId, attributes) {
            validate(id);
            validate(subId);
            
            return this.clean(this.repository.one(id).one(sub, subId).put(attributes));
        };
        
        
        
        // Delete a record
        BaseService.prototype.destroy = function (id) {
            validate(id);
            
            return this.clean(this.repository.one(id).remove());
        };
        
        // Delete a sub record
        // TODO: test me
        BaseService.prototype.destroySub = function (id, sub, subId) {
            validate(id);
            validate(subId);
            
            return this.clean(this.repository.one(id).one(sub, subId).remove());
        };
        
        
        
        return BaseService;
        
    }]);
angular.module('auth')

.constant('AuthEvents', {
    clientAuthenticationSuccess: 'auth:client:success',
    clientAuthenticationFailed: 'auth:client:failed',
    
    // Do not change! Part of http-auth-interceptor library.
    authenticationFailed: 'event:auth-loginRequired',
});
angular.module('auth.service', ['auth.session'])

.factory('AuthService', ['$rootScope', '$log', '$http', '$q', 'Config', 'AuthSession', 'authService', 'AuthEvents',
    function ($rootScope, $log, $http, $q, Config, AuthSession, authService, AuthEvents) {
        
        var AuthService = {};
        
        
        
        var notAuthenticatedEventHandler = function (event, response) {
            
            $log.debug('AuthService.notAuthenticatedEventHandler()', 'Invalid credentials to access API endpoint: ', response.config.url);
            
            // Only handle event if requesting data from non-OAuth2 API endpoints
            if (response.config.url.endsWith('auth/accesstoken') || response.config.url.endsWith('auth/credentials')) {
                // Do not assist on access token or refresh token request
                return;
            }
            
            AuthService.authenticateAsClient();
            
        };
        
        var authSuccessEventHandler = function () {
            
            $log.debug('AuthService.authSuccessEventHandler()', 'Confirming successful authentication');
            
            // Confirm successful login so the auth interceptor
            // buffer can continue to be executed
            authService.loginConfirmed();
            
        };
        
        
        
        // Handle the possible event where the API denies the user's request
        // and we have to try to refresh the user's token object first
        $rootScope.$on(AuthEvents.authenticationFailed, notAuthenticatedEventHandler);
        
        $rootScope.$on(AuthEvents.clientAuthenticationSuccess, authSuccessEventHandler);
        
        var REQUEST_OPTIONS = {
            ignoreAuthModule: true, // ignore 401 buffering, just fail
            responseType: 'json' // expect application/json
        };
        
        // loosen CORS-checks to within the same domain (subdomains ignored)
        window.domain = window.location.hostname.split('.').slice(1).join('.');
        var loadAccessToken = function (grant) {
            var requestData = {
                client_id: Config.oauth.client_id, // app credential
                client_secret: Config.oauth.client_secret // app secret
            };
            
            for (var key in grant) {
                requestData[key] = grant[key];
            }
            
            return $http.post(Config.api.url + 'auth/accesstoken', requestData, REQUEST_OPTIONS).then(function (result) { // Access token request successful
                
                $log.debug('Access token: ', result.data); // REMOVE
                
                AuthSession.setTokenObject(result.data);
                
                return result.data;
                
            }, function (result) {
                
                AuthSession.destroy();
                
                return $q.reject(result);
                
            });
        };
        
        /**
         * Authenticate the current user as an application to be able to make public requests.
         */
        AuthService.authenticateAsClient = function () {
            
            $log.debug('AuthService.authenticateAsClient()'); // REMOVE
            
            return loadAccessToken({grant_type: 'client_credentials'}).then(function (result) {
                
                $rootScope.$broadcast(AuthEvents.clientAuthenticationSuccess);
                
                return true;
                
            }, function (result) {
                
                // Access token request failed
                $log.debug('Retrieving client app access token failed.', result.data); // REMOVE
                
                $rootScope.$broadcast(AuthEvents.clientAuthenticationFailed);
                
                return $q.reject(result);
                
            });
            
        };
        
        
        
        AuthService.isAuthenticated = function () {
            return !!AuthSession.getTokenObject();
        };
        
        
        
        AuthService.getAccessToken = function () {
            return AuthSession.getTokenObject().access_token;
        };
        
        
        
        return AuthService;
        
    }]);
angular.module('auth.session', ['session'])

.service('AuthSession', ['$log', 'Session',
    function ($log, Session) {
        
        this.setTokenObject = function (tokenObject) {
            Session.set('client.tokenObject', tokenObject);
        };
        
        this.getTokenObject = function () {
            return Session.get('client.tokenObject');
        };
        
        this.destroyTokenObject = function () {
            Session.remove('client.tokenObject');
        };
        
        
        
        this.destroy = function () {
            $log.debug('Destroying session');
            
            this.destroyTokenObject();
        };
        
    }]);
angular.module('session.service', [])

.factory('Session', ['localStorageService',
    function (localStorageService) {

        // Just return the library module we're using
        // as this service acts more as an easy access point
        return localStorageService;

    }]);
function generateRandomString(l) {
    if (l == null) {
        l = 64;
    }
    
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    var randomstring = '';
    for (var i = 0; i < l; i++) {
        var rnum = Math.floor(Math.random() * chars.length);
        randomstring += chars.substring(rnum, rnum + 1);
    }
    
    return randomstring;
}
angular.module('gmail')

.factory('GmailService', ['$rootScope', '$log',
    function ($rootScope, $log) {
        
        $log.debug('GmailService init');
        
        var GmailService = {};
        
        var gmail = new Gmail();
        
        
        
        // When composing a new message or replying
        gmail.observe.on('compose', function (compose, type) {
            // INFO: type can be compose, reply or forward
            $rootScope.$broadcast('compose', compose, type);
        });
        
        // Before the message is sent
        gmail.observe.before('send_message', function (url, body, data, xhr) {
            $rootScope.$broadcast('send_message', url, body, data, xhr);
        });
        
        
        
        GmailService.getUserMail = function () {
            return gmail.get.user_email();
        };
        
        
        
        return GmailService;
        
    }]);